## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.
## Dune file: /Users/gar/mina/async_kernel/src/dune

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns_module",
)

## Global Options
load(
    "//bzl:config.bzl",
    "ARCHIVE_OPTS",
    "GLOBAL_CLI_OPTS",
    "INTERFACE_OPTS",
    "MODULE_OPTS",
    "NS_MODULE_OPTS",
)

## Repo Options
load("//bzl/async_kernel:config.bzl", "ASYNC_KERNEL_OPTS")

PKG_OPTS = GLOBAL_CLI_OPTS + ASYNC_KERNEL_OPTS + []

LIB_1_OPTS = []

LIB_1_ARCHIVE_OPTS = PKG_OPTS + LIB_1_OPTS + ARCHIVE_OPTS

LIB_1_INTERFACE_OPTS = PKG_OPTS + LIB_1_OPTS + INTERFACE_OPTS

LIB_1_MODULE_OPTS = PKG_OPTS + LIB_1_OPTS + MODULE_OPTS

LIB_1_NS_MODULE_OPTS = PKG_OPTS + LIB_1_OPTS + NS_MODULE_OPTS

LIB_1_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
    "@opam//pkg:core_kernel.moption",
    "@opam//pkg:core_kernel.thread_pool_cpu_affinity",
    "@opam//pkg:core_kernel.thread_safe_queue",
]

PPX_1 = "//bzl/ppx:ppx[ppx_jane]"

PPX_1_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib", "async_kernel",
    "-annotated-ignores",
    "-check-doc-comments",
]

################################################################
## LIB 1
################################################################
ocaml_archive(
    name = "async_kernel",
    opts = LIB_1_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_kernel_ns",
        ":Async_condition",
        ":Async_gc",
        ":Async_invariant",
        ":Async_invariant_intf",
        ":Async_kernel",
        ":Async_kernel_config",
        ":Async_quickcheck",
        ":Async_quickcheck_intf",
        ":Async_stream",
        ":Bvar",
        ":Clock_intf",
        ":Clock_ns",
        ":Debug",
        ":Deferred",
        ":Deferred0",
        ":Deferred1",
        ":Deferred_array",
        ":Deferred_list",
        ":Deferred_map",
        ":Deferred_memo",
        ":Deferred_option",
        ":Deferred_or_error",
        ":Deferred_queue",
        ":Deferred_result",
        ":Deferred_sequence",
        ":Deferred_std",
        ":Execution_context",
        ":External_job",
        ":Import",
        ":Ivar",
        ":Ivar0",
        ":Ivar_filler",
        ":Job",
        ":Job_or_event",
        ":Job_or_event_intf",
        ":Job_pool",
        ":Job_queue",
        ":Lazy_deferred",
        ":Monad_sequence",
        ":Monitor",
        ":Monitor0",
        ":Mvar",
        ":Pipe",
        ":Priority",
        ":Require_explicit_time_source",
        ":Scheduler",
        ":Scheduler0",
        ":Scheduler1",
        ":Stack_or_counter",
        ":Synchronous_time_source",
        ":Synchronous_time_source0",
        ":Tail",
        ":Throttle",
        ":Time_ns",
        ":Time_source",
        ":Time_source_intf",
        ":Tracing",
        ":Types",
    ],
)

ocaml_ns_module(
    name = "Async_kernel_ns",
    ns = "async_kernel",
    opts = LIB_1_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "async_condition.ml",
        "async_gc.ml",
        "async_invariant.ml",
        "async_invariant_intf.ml",
        "async_kernel.ml",
        "async_kernel_config.ml",
        "async_quickcheck.ml",
        "async_quickcheck_intf.ml",
        "async_stream.ml",
        "bvar.ml",
        "clock_intf.ml",
        "clock_ns.ml",
        "debug.ml",
        "deferred.ml",
        "deferred0.ml",
        "deferred1.ml",
        "deferred_array.ml",
        "deferred_list.ml",
        "deferred_map.ml",
        "deferred_memo.ml",
        "deferred_option.ml",
        "deferred_or_error.ml",
        "deferred_queue.ml",
        "deferred_result.ml",
        "deferred_sequence.ml",
        "deferred_std.ml",
        "execution_context.ml",
        "external_job.ml",
        "import.ml",
        "ivar.ml",
        "ivar0.ml",
        "ivar_filler.ml",
        "job.ml",
        "job_or_event.ml",
        "job_or_event_intf.ml",
        "job_pool.ml",
        "job_queue.ml",
        "lazy_deferred.ml",
        "monad_sequence.ml",
        "monitor.ml",
        "monitor0.ml",
        "mvar.ml",
        "pipe.ml",
        "priority.ml",
        "require_explicit_time_source.ml",
        "scheduler.ml",
        "scheduler0.ml",
        "scheduler1.ml",
        "stack_or_counter.ml",
        "synchronous_time_source.ml",
        "synchronous_time_source0.ml",
        "tail.ml",
        "throttle.ml",
        "time_ns.ml",
        "time_source.ml",
        "time_source_intf.ml",
        "tracing.ml",
        "types.ml",
    ],
)

ocaml_module(
    name = "Async_condition",
    src = "async_condition.ml",
    intf = ":_Async_condition",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
        ":Ivar",
    ],
)

ocaml_interface(
    name = "_Async_condition",
    src = "async_condition.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
    ],
)

ocaml_module(
    name = "Async_gc",
    src = "async_gc.ml",
    intf = ":_Async_gc",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Scheduler",
    ],
)

ocaml_interface(
    name = "_Async_gc",
    src = "async_gc.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Async_invariant",
    src = "async_invariant.ml",
    intf = ":_Async_invariant",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_invariant_intf",
        ":Deferred",
        ":Import",
    ],
)

ocaml_interface(
    name = "_Async_invariant",
    src = "async_invariant.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_invariant_intf",
    ],
)

ocaml_module(
    name = "Async_invariant_intf",
    src = "async_invariant_intf.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
        ":Import",
    ],
)

ocaml_module(
    name = "Async_kernel",
    src = "async_kernel.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_condition",
        ":Async_gc",
        ":Async_invariant",
        ":Async_kernel_config",
        ":Async_quickcheck",
        ":Async_stream",
        ":Bvar",
        ":Clock_ns",
        ":Debug",
        ":Deferred",
        ":Execution_context",
        ":Import",
        ":Ivar",
        ":Ivar0",
        ":Ivar_filler",
        ":Job",
        ":Lazy_deferred",
        ":Monad_sequence",
        ":Monitor",
        ":Mvar",
        ":Pipe",
        ":Priority",
        ":Require_explicit_time_source",
        ":Scheduler",
        ":Stack_or_counter",
        ":Synchronous_time_source",
        ":Tail",
        ":Throttle",
        ":Time_source",
        ":Tracing",
    ],
)

ocaml_module(
    name = "Async_kernel_config",
    src = "async_kernel_config.ml",
    intf = ":_Async_kernel_config",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Time_ns",
    ],
)

ocaml_interface(
    name = "_Async_kernel_config",
    src = "async_kernel_config.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Time_ns",
    ],
)

ocaml_module(
    name = "Async_quickcheck",
    src = "async_quickcheck.ml",
    intf = ":_Async_quickcheck",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
    ],
)

ocaml_interface(
    name = "_Async_quickcheck",
    src = "async_quickcheck.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_quickcheck_intf",
    ],
)

ocaml_module(
    name = "Async_quickcheck_intf",
    src = "async_quickcheck_intf.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
    ],
)

ocaml_module(
    name = "Async_stream",
    src = "async_stream.ml",
    intf = ":_Async_stream",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_std",
        ":Ivar",
        ":Monitor",
        ":Tail",
    ],
)

ocaml_interface(
    name = "_Async_stream",
    src = "async_stream.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Import",
        ":Tail",
    ],
)

ocaml_module(
    name = "Bvar",
    src = "bvar.ml",
    intf = ":_Bvar",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Ivar",
        ":Scheduler1",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Bvar",
    src = "bvar.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred0",
        ":Import",
        ":Types",
    ],
)

ocaml_module(
    name = "Clock_intf",
    src = "clock_intf.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_stream",
        ":Deferred1",
        ":Ivar",
        ":Time_source",
    ],
)

ocaml_module(
    name = "Clock_ns",
    src = "clock_ns.ml",
    intf = ":_Clock_ns",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Clock_intf",
        ":Import",
        ":Scheduler1",
        ":Time_source",
        # ":Time_source_intf",
    ],
)

ocaml_interface(
    name = "_Clock_ns",
    src = "clock_ns.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Clock_intf",
        ":Import",
        ":Time_ns",
    ],
)

ocaml_module(
    name = "Debug",
    src = "debug.ml",
    intf = ":_Debug",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_kernel_config",
        ":Time_ns",
    ],
)

ocaml_interface(
    name = "_Debug",
    src = "debug.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_kernel_config",
    ],
)

ocaml_module(
    name = "Deferred",
    src = "deferred.ml",
    intf = ":_Deferred",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_array",
        ":Deferred_list",
        ":Deferred_map",
        ":Deferred_memo",
        ":Deferred_option",
        ":Deferred_or_error",
        ":Deferred_queue",
        ":Deferred_result",
        ":Deferred_sequence",
    ],
)

ocaml_interface(
    name = "_Deferred",
    src = "deferred.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_array",
        ":Deferred_list",
        ":Deferred_map",
        ":Deferred_memo",
        ":Deferred_option",
        ":Deferred_or_error",
        ":Deferred_queue",
        ":Deferred_result",
        ":Deferred_sequence",
        ":Import",
        ":Ivar",
    ],
)

ocaml_module(
    name = "Deferred0",
    src = "deferred0.ml",
    intf = ":_Deferred0",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Ivar0",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Deferred0",
    src = "deferred0.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
        ":Ivar0",
        ":Types",
    ],
)

ocaml_module(
    name = "Deferred1",
    src = "deferred1.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred0",
        ":Ivar",
        ":Monad_sequence",
        ":Scheduler1",
    ],
)

ocaml_module(
    name = "Deferred_array",
    src = "deferred_array.ml",
    intf = ":_Deferred_array",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_std",
        ":Ivar",
        ":Throttle",
    ],
)

ocaml_interface(
    name = "_Deferred_array",
    src = "deferred_array.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
    ],
)

ocaml_module(
    name = "Deferred_list",
    src = "deferred_list.ml",
    intf = ":_Deferred_list",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_std",
        ":Ivar",
        ":Throttle",
    ],
)

ocaml_interface(
    name = "_Deferred_list",
    src = "deferred_list.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
    ],
)

ocaml_module(
    name = "Deferred_map",
    src = "deferred_map.ml",
    intf = ":_Deferred_map",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_list",
        ":Deferred_std",
    ],
)

ocaml_interface(
    name = "_Deferred_map",
    src = "deferred_map.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Monad_sequence",
    ],
)

ocaml_module(
    name = "Deferred_memo",
    src = "deferred_memo.ml",
    intf = ":_Deferred_memo",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_std",
        ":Monitor",
    ],
)

ocaml_interface(
    name = "_Deferred_memo",
    src = "deferred_memo.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Import",
    ],
)

ocaml_module(
    name = "Deferred_option",
    src = "deferred_option.ml",
    intf = ":_Deferred_option",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
    ],
)

ocaml_interface(
    name = "_Deferred_option",
    src = "deferred_option.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred0",
    ],
)

ocaml_module(
    name = "Deferred_or_error",
    src = "deferred_or_error.ml",
    intf = ":_Deferred_or_error",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_result",
        ":Import",
        ":Monitor",
        ":Throttle",
    ],
)

ocaml_interface(
    name = "_Deferred_or_error",
    src = "deferred_or_error.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Import",
        ":Monad_sequence",
    ],
)

ocaml_module(
    name = "Deferred_queue",
    src = "deferred_queue.ml",
    intf = ":_Deferred_queue",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred_list",
        ":Deferred_std",
    ],
)

ocaml_interface(
    name = "_Deferred_queue",
    src = "deferred_queue.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
    ],
)

ocaml_module(
    name = "Deferred_result",
    src = "deferred_result.ml",
    intf = ":_Deferred_result",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_std",
    ],
)

ocaml_interface(
    name = "_Deferred_result",
    src = "deferred_result.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
    ],
)

ocaml_module(
    name = "Deferred_sequence",
    src = "deferred_sequence.ml",
    intf = ":_Deferred_sequence",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_std",
        ":Throttle",
    ],
)

ocaml_interface(
    name = "_Deferred_sequence",
    src = "deferred_sequence.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
    ],
)

ocaml_module(
    name = "Deferred_std",
    src = "deferred_std.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
    ],
)

ocaml_module(
    name = "Execution_context",
    src = "execution_context.ml",
    intf = ":_Execution_context",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Monitor0",
        ":Priority",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Execution_context",
    src = "execution_context.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Monitor0",
        ":Priority",
        ":Types",
    ],
)

ocaml_module(
    name = "External_job",
    src = "external_job.ml",
    intf = ":_External_job",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Types",
    ],
)

ocaml_interface(
    name = "_External_job",
    src = "external_job.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
        ":Types",
    ],
)

ocaml_module(
    name = "Import",
    src = "import.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_kernel_config",
        ":Debug",
        ":Time_ns",
    ],
)

ocaml_module(
    name = "Ivar",
    src = "ivar.ml",
    intf = ":_Ivar",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred0",
        ":Ivar0",
    ],
)

ocaml_interface(
    name = "_Ivar",
    src = "ivar.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred0",
        ":Import",
        ":Types",
    ],
)

ocaml_module(
    name = "Ivar0",
    src = "ivar0.ml",
    intf = ":_Ivar0",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
        ":Scheduler1",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Ivar0",
    src = "ivar0.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
        ":Types",
    ],
)

ocaml_module(
    name = "Ivar_filler",
    src = "ivar_filler.ml",
    intf = ":_Ivar_filler",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Ivar",
    ],
)

ocaml_interface(
    name = "_Ivar_filler",
    src = "ivar_filler.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred0",
        ":Import",
    ],
)

ocaml_module(
    name = "Job",
    src = "job.ml",
    intf = ":_Job",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Job_pool",
    ],
)

ocaml_interface(
    name = "_Job",
    src = "job.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Types",
    ],
)

ocaml_module(
    name = "Job_or_event",
    src = "job_or_event.ml",
    intf = ":_Job_or_event",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
        # ":Job_or_event",
        ":Time_ns",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Job_or_event",
    src = "job_or_event.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Job_or_event_intf",
    ],
)

ocaml_module(
    name = "Job_or_event_intf",
    src = "job_or_event_intf.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Job",
        ":Types",
    ],
)

ocaml_module(
    name = "Job_pool",
    src = "job_pool.ml",
    intf = ":_Job_pool",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
    ],
)

ocaml_interface(
    name = "_Job_pool",
    src = "job_pool.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
    ],
)

ocaml_module(
    name = "Job_queue",
    src = "job_queue.ml",
    intf = ":_Job_queue",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":External_job",
        ":Import",
        ":Scheduler0",
        ":Time_ns",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Job_queue",
    src = "job_queue.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
        ":Scheduler0",
        ":Types",
    ],
)

ocaml_module(
    name = "Lazy_deferred",
    src = "lazy_deferred.ml",
    intf = ":_Lazy_deferred",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
        ":Deferred_std",
        ":Ivar",
    ],
)

ocaml_interface(
    name = "_Lazy_deferred",
    src = "lazy_deferred.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
    ],
)

ocaml_module(
    name = "Monad_sequence",
    src = "monad_sequence.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
    ],
)

ocaml_module(
    name = "Monitor",
    src = "monitor.ml",
    intf = ":_Monitor",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_kernel_config",
        ":Debug",
        ":Deferred1",
        ":Deferred_std",
        ":Execution_context",
        ":Import",
        ":Ivar",
        ":Ivar_filler",
        ":Monitor0",
        ":Priority",
        ":Scheduler1",
        ":Tail",
    ],
)

ocaml_interface(
    name = "_Monitor",
    src = "monitor.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Execution_context",
        ":Monitor0",
        ":Priority",
        ":Tail",
    ],
)

ocaml_module(
    name = "Monitor0",
    src = "monitor0.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Debug",
        ":Import",
        ":Types",
    ],
)

ocaml_module(
    name = "Mvar",
    src = "mvar.ml",
    intf = ":_Mvar",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Bvar",
        ":Deferred_std",
        ":Import",
        ":Ivar",
        ":Pipe",
    ],
)

ocaml_interface(
    name = "_Mvar",
    src = "mvar.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred",
        ":Import",
        ":Pipe",
    ],
)

ocaml_module(
    name = "Pipe",
    src = "pipe.ml",
    intf = ":_Pipe",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_stream",
        ":Deferred",
        ":Deferred_std",
        ":Import",
        ":Ivar",
        ":Monitor",
        ":Tail",
    ],
)

ocaml_interface(
    name = "_Pipe",
    src = "pipe.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_stream",
        ":Deferred",
    ],
)

ocaml_module(
    name = "Priority",
    src = "priority.ml",
    intf = ":_Priority",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
    ],
)

ocaml_interface(
    name = "_Priority",
    src = "priority.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
    ],
)

ocaml_module(
    name = "Require_explicit_time_source",
    src = "require_explicit_time_source.ml",
    intf = ":_Require_explicit_time_source",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Clock_ns",
        ":Import",
        ":Scheduler",
        ":Time_ns",
    ],
)

ocaml_interface(
    name = "_Require_explicit_time_source",
    src = "require_explicit_time_source.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Clock_intf",
        ":Deferred",
        ":Import",
        ":Scheduler",
        ":Time_ns",
    ],
)

ocaml_module(
    name = "Scheduler",
    src = "scheduler.ml",
    intf = ":_Scheduler",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_stream",
        ":Bvar",
        ":Debug",
        ":Deferred1",
        ":Deferred_std",
        ":Execution_context",
        ":External_job",
        ":Import",
        ":Job_queue",
        ":Monitor",
        ":Scheduler1",
        ":Synchronous_time_source0",
        ":Tail",
        ":Time_ns",
    ],
)

ocaml_interface(
    name = "_Scheduler",
    src = "scheduler.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_stream",
        ":Deferred1",
        ":Execution_context",
        ":Import",
        ":Job",
        ":Monitor",
        ":Priority",
        ":Time_ns",
        ":Types",
    ],
)

ocaml_module(
    name = "Scheduler0",
    src = "scheduler0.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Tracing",
        ":Types",
    ],
)

ocaml_module(
    name = "Scheduler1",
    src = "scheduler1.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_kernel_config",
        ":Debug",
        ":Execution_context",
        ":External_job",
        ":Import",
        ":Job_pool",
        ":Job_queue",
        ":Priority",
        ":Scheduler0",
        ":Synchronous_time_source0",
        ":Time_ns",
        ":Types",
    ],
)

ocaml_module(
    name = "Stack_or_counter",
    src = "stack_or_counter.ml",
    intf = ":_Stack_or_counter",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_interface(
    name = "_Stack_or_counter",
    src = "stack_or_counter.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Synchronous_time_source",
    src = "synchronous_time_source.ml",
    intf = ":_Synchronous_time_source",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Scheduler1",
        ":Synchronous_time_source0",
    ],
)

ocaml_interface(
    name = "_Synchronous_time_source",
    src = "synchronous_time_source.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Job",
        ":Time_ns",
        ":Types",
    ],
)

ocaml_module(
    name = "Synchronous_time_source0",
    src = "synchronous_time_source0.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
        ":Import",
        ":Job",
        ":Job_or_event_intf",
        ":Job_or_event",
        ":Monitor0",
        ":Scheduler0",
        ":Time_ns",
        ":Types",
    ],
)

ocaml_module(
    name = "Tail",
    src = "tail.ml",
    intf = ":_Tail",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Import",
        ":Ivar",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Tail",
    src = "tail.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Import",
        ":Types",
    ],
)

ocaml_module(
    name = "Throttle",
    src = "throttle.ml",
    intf = ":_Throttle",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Deferred_std",
        ":Import",
        ":Ivar",
        ":Monitor",
        ":Stack_or_counter",
    ],
)

ocaml_interface(
    name = "_Throttle",
    src = "throttle.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Deferred1",
        ":Monad_sequence",
    ],
)

ocaml_module(
    name = "Time_ns",
    src = "time_ns.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Time_source",
    src = "time_source.ml",
    intf = ":_Time_source",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Bvar",
        ":Debug",
        ":Deferred1",
        ":Deferred_std",
        ":Import",
        ":Ivar",
        ":Job_or_event",
        ":Monitor",
        ":Scheduler1",
        ":Synchronous_time_source",
        ":Synchronous_time_source0",
        ":Tail",
        ":Time_ns",
        ":Time_source_intf",
    ],
)

ocaml_interface(
    name = "_Time_source",
    src = "time_source.mli",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Time_source_intf",
    ],
)

ocaml_module(
    name = "Time_source_intf",
    src = "time_source_intf.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Async_stream",
        ":Deferred1",
        ":Import",
        ":Ivar",
        ":Job",
        ":Synchronous_time_source",
        ":Time_ns",
    ],
)

ocaml_module(
    name = "Tracing",
    src = "tracing.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Execution_context",
    ],
)

ocaml_module(
    name = "Types",
    src = "types.ml",
    ns_module = ":Async_kernel_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Import",
        ":Priority",
        ":Time_ns",
    ],
)
