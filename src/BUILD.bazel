## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load(
    "//:BUILD.bzl",
    "REPO_ARCHIVE_OPTS",
    "REPO_INTERFACE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
)
load(
    ":BUILD.bzl",
    "PKG_ARCHIVE_OPTS",
    "PKG_INTERFACE_OPTS",
    "PKG_MODULE_OPTS",
    "PKG_NS_MODULE_OPTS",
)

################################################################
## STANZA 1: LIBRARY ASYNC_KERNEL
################################################################
ASYNC_KERNEL_ARCHIVE_OPTS = REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + []

ASYNC_KERNEL_INTERFACE_OPTS = REPO_INTERFACE_OPTS + PKG_INTERFACE_OPTS

ASYNC_KERNEL_MODULE_OPTS = REPO_MODULE_OPTS + PKG_MODULE_OPTS

ASYNC_KERNEL_NS_MODULE_OPTS = REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

ASYNC_KERNEL_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
    "@opam//pkg:core_kernel.moption",
    "@opam//pkg:core_kernel.thread_pool_cpu_affinity",
    "@opam//pkg:core_kernel.thread_safe_queue",
]

ASYNC_KERNEL_PPX = "@//bzl/ppx:ppx.exe[ppx_jane]"

ASYNC_KERNEL_PPX_ARGS = [
    # do not sort (buildifier)
    "-annotated-ignores",
    "-check-doc-comments",
    "-inline-test-lib",
    "async_kernel",
]

##############
ocaml_archive(
    name = "async_kernel",
    opts = ASYNC_KERNEL_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_condition",
        ":_Async_gc",
        ":_Async_invariant",
        ":_Async_invariant_intf",
        ":_Async_kernel",
        ":_Async_kernel_config",
        ":_Async_quickcheck",
        ":_Async_quickcheck_intf",
        ":_Async_stream",
        ":_Bvar",
        ":_Clock_intf",
        ":_Clock_ns",
        ":_Debug",
        ":_Deferred",
        ":_Deferred0",
        ":_Deferred1",
        ":_Deferred_array",
        ":_Deferred_list",
        ":_Deferred_map",
        ":_Deferred_memo",
        ":_Deferred_option",
        ":_Deferred_or_error",
        ":_Deferred_queue",
        ":_Deferred_result",
        ":_Deferred_sequence",
        ":_Deferred_std",
        ":_Execution_context",
        ":_External_job",
        ":_Import",
        ":_Ivar",
        ":_Ivar0",
        ":_Ivar_filler",
        ":_Job",
        ":_Job_or_event",
        ":_Job_or_event_intf",
        ":_Job_pool",
        ":_Job_queue",
        ":_Lazy_deferred",
        ":_Monad_sequence",
        ":_Monitor",
        ":_Monitor0",
        ":_Mvar",
        ":_Pipe",
        ":_Priority",
        ":_Require_explicit_time_source",
        ":_Scheduler",
        ":_Scheduler0",
        ":_Scheduler1",
        ":_Stack_or_counter",
        ":_Synchronous_time_source",
        ":_Synchronous_time_source0",
        ":_Tail",
        ":_Throttle",
        ":_Time_ns",
        ":_Time_source",
        ":_Time_source_intf",
        ":_Tracing",
        ":_Types",
    ],
)

#########
ocaml_ns(
    name = "Async_kernel_ns",
    ns = "async_kernel",
    opts = ASYNC_KERNEL_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "async_condition.ml",
        "async_gc.ml",
        "async_invariant.ml",
        "async_invariant_intf.ml",
        "async_kernel.ml",
        "async_kernel_config.ml",
        "async_quickcheck.ml",
        "async_quickcheck_intf.ml",
        "async_stream.ml",
        "bvar.ml",
        "clock_intf.ml",
        "clock_ns.ml",
        "debug.ml",
        "deferred.ml",
        "deferred0.ml",
        "deferred1.ml",
        "deferred_array.ml",
        "deferred_list.ml",
        "deferred_map.ml",
        "deferred_memo.ml",
        "deferred_option.ml",
        "deferred_or_error.ml",
        "deferred_queue.ml",
        "deferred_result.ml",
        "deferred_sequence.ml",
        "deferred_std.ml",
        "execution_context.ml",
        "external_job.ml",
        "import.ml",
        "ivar.ml",
        "ivar0.ml",
        "ivar_filler.ml",
        "job.ml",
        "job_or_event.ml",
        "job_or_event_intf.ml",
        "job_pool.ml",
        "job_queue.ml",
        "lazy_deferred.ml",
        "monad_sequence.ml",
        "monitor.ml",
        "monitor0.ml",
        "mvar.ml",
        "pipe.ml",
        "priority.ml",
        "require_explicit_time_source.ml",
        "scheduler.ml",
        "scheduler0.ml",
        "scheduler1.ml",
        "stack_or_counter.ml",
        "synchronous_time_source.ml",
        "synchronous_time_source0.ml",
        "tail.ml",
        "throttle.ml",
        "time_ns.ml",
        "time_source.ml",
        "time_source_intf.ml",
        "tracing.ml",
        "types.ml",
    ],
)

#############
ocaml_module(
    name = "_Async_condition",
    src = "async_condition.ml",
    intf = ":_Async_condition.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
        ":_Ivar",
    ],
)

################
ocaml_interface(
    name = "_Async_condition.cmi",
    src = "async_condition.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
    ],
)

#############
ocaml_module(
    name = "_Async_gc",
    src = "async_gc.ml",
    intf = ":_Async_gc.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Scheduler",
    ],
)

################
ocaml_interface(
    name = "_Async_gc.cmi",
    src = "async_gc.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS,
)

#############
ocaml_module(
    name = "_Async_invariant",
    src = "async_invariant.ml",
    intf = ":_Async_invariant.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_invariant_intf",
        ":_Deferred",
        ":_Import",
    ],
)

################
ocaml_interface(
    name = "_Async_invariant.cmi",
    src = "async_invariant.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_invariant_intf",
    ],
)

#############
ocaml_module(
    name = "_Async_invariant_intf",
    src = "async_invariant_intf.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Async_kernel",
    src = "async_kernel.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_condition",
        ":_Async_gc",
        ":_Async_invariant",
        ":_Async_kernel_config",
        ":_Async_quickcheck",
        ":_Async_stream",
        ":_Bvar",
        ":_Clock_ns",
        ":_Debug",
        ":_Deferred",
        ":_Execution_context",
        ":_Import",
        ":_Ivar",
        ":_Ivar0",
        ":_Ivar_filler",
        ":_Job",
        ":_Lazy_deferred",
        ":_Monad_sequence",
        ":_Monitor",
        ":_Mvar",
        ":_Pipe",
        ":_Priority",
        ":_Require_explicit_time_source",
        ":_Scheduler",
        ":_Stack_or_counter",
        ":_Synchronous_time_source",
        ":_Tail",
        ":_Throttle",
        ":_Time_source",
        ":_Tracing",
    ],
)

#############
ocaml_module(
    name = "_Async_kernel_config",
    src = "async_kernel_config.ml",
    intf = ":_Async_kernel_config.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Time_ns",
    ],
)

################
ocaml_interface(
    name = "_Async_kernel_config.cmi",
    src = "async_kernel_config.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Time_ns",
    ],
)

#############
ocaml_module(
    name = "_Async_quickcheck",
    src = "async_quickcheck.ml",
    intf = ":_Async_quickcheck.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
    ],
)

################
ocaml_interface(
    name = "_Async_quickcheck.cmi",
    src = "async_quickcheck.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_quickcheck_intf",
    ],
)

#############
ocaml_module(
    name = "_Async_quickcheck_intf",
    src = "async_quickcheck_intf.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
    ],
)

#############
ocaml_module(
    name = "_Async_stream",
    src = "async_stream.ml",
    intf = ":_Async_stream.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_std",
        ":_Ivar",
        ":_Monitor",
        ":_Tail",
    ],
)

################
ocaml_interface(
    name = "_Async_stream.cmi",
    src = "async_stream.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Import",
        ":_Tail",
    ],
)

#############
ocaml_module(
    name = "_Bvar",
    src = "bvar.ml",
    intf = ":_Bvar.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Ivar",
        ":_Scheduler1",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_Bvar.cmi",
    src = "bvar.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred0",
        ":_Import",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Clock_intf",
    src = "clock_intf.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    ppx_output_format = "text",
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_stream",
        ":_Deferred1",
        ":_Ivar",
        ":_Time_source",
        # without this we get impl/intf mismatch err for clock_ns
        # this can also be added as a dep of time_source.ml
        ":_Time_source_intf",
    ],
)

#############
ocaml_module(
    name = "_Clock_ns",
    src = "clock_ns.ml",
    intf = ":_Clock_ns.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    ppx_output_format = "text",
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        # ":_Clock_intf",
        ":_Import",
        ":_Scheduler1",
        # ":_Time_source",
        # ":_Time_source_intf",
    ],
)

################
ocaml_interface(
    name = "_Clock_ns.cmi",
    src = "clock_ns.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    ppx_output_format = "text",
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Clock_intf",
        ":_Import",
        # ":_Time_ns",
        # ":_Time_source",
        # ":_Time_source_intf",
    ],
)

#############
ocaml_module(
    name = "_Debug",
    src = "debug.ml",
    intf = ":_Debug.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_kernel_config",
        ":_Time_ns",
    ],
)

################
ocaml_interface(
    name = "_Debug.cmi",
    src = "debug.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_kernel_config",
    ],
)

#############
ocaml_module(
    name = "_Deferred",
    src = "deferred.ml",
    intf = ":_Deferred.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_array",
        ":_Deferred_list",
        ":_Deferred_map",
        ":_Deferred_memo",
        ":_Deferred_option",
        ":_Deferred_or_error",
        ":_Deferred_queue",
        ":_Deferred_result",
        ":_Deferred_sequence",
    ],
)

################
ocaml_interface(
    name = "_Deferred.cmi",
    src = "deferred.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_array",
        ":_Deferred_list",
        ":_Deferred_map",
        ":_Deferred_memo",
        ":_Deferred_option",
        ":_Deferred_or_error",
        ":_Deferred_queue",
        ":_Deferred_result",
        ":_Deferred_sequence",
        ":_Import",
        ":_Ivar",
    ],
)

#############
ocaml_module(
    name = "_Deferred0",
    src = "deferred0.ml",
    intf = ":_Deferred0.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Ivar0",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_Deferred0.cmi",
    src = "deferred0.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
        ":_Ivar0",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Deferred1",
    src = "deferred1.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred0",
        ":_Ivar",
        ":_Monad_sequence",
        ":_Scheduler1",
    ],
)

#############
ocaml_module(
    name = "_Deferred_array",
    src = "deferred_array.ml",
    intf = ":_Deferred_array.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_std",
        ":_Ivar",
        ":_Throttle",
    ],
)

################
ocaml_interface(
    name = "_Deferred_array.cmi",
    src = "deferred_array.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
    ],
)

#############
ocaml_module(
    name = "_Deferred_list",
    src = "deferred_list.ml",
    intf = ":_Deferred_list.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_std",
        ":_Ivar",
        ":_Throttle",
    ],
)

################
ocaml_interface(
    name = "_Deferred_list.cmi",
    src = "deferred_list.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
    ],
)

#############
ocaml_module(
    name = "_Deferred_map",
    src = "deferred_map.ml",
    intf = ":_Deferred_map.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_list",
        ":_Deferred_std",
    ],
)

################
ocaml_interface(
    name = "_Deferred_map.cmi",
    src = "deferred_map.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Monad_sequence",
    ],
)

#############
ocaml_module(
    name = "_Deferred_memo",
    src = "deferred_memo.ml",
    intf = ":_Deferred_memo.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_std",
        ":_Monitor",
    ],
)

################
ocaml_interface(
    name = "_Deferred_memo.cmi",
    src = "deferred_memo.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Deferred_option",
    src = "deferred_option.ml",
    intf = ":_Deferred_option.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
    ],
)

################
ocaml_interface(
    name = "_Deferred_option.cmi",
    src = "deferred_option.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred0",
    ],
)

#############
ocaml_module(
    name = "_Deferred_or_error",
    src = "deferred_or_error.ml",
    intf = ":_Deferred_or_error.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_result",
        ":_Import",
        ":_Monitor",
        ":_Throttle",
    ],
)

################
ocaml_interface(
    name = "_Deferred_or_error.cmi",
    src = "deferred_or_error.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Import",
        ":_Monad_sequence",
    ],
)

#############
ocaml_module(
    name = "_Deferred_queue",
    src = "deferred_queue.ml",
    intf = ":_Deferred_queue.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred_list",
        ":_Deferred_std",
    ],
)

################
ocaml_interface(
    name = "_Deferred_queue.cmi",
    src = "deferred_queue.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
    ],
)

#############
ocaml_module(
    name = "_Deferred_result",
    src = "deferred_result.ml",
    intf = ":_Deferred_result.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_std",
    ],
)

################
ocaml_interface(
    name = "_Deferred_result.cmi",
    src = "deferred_result.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
    ],
)

#############
ocaml_module(
    name = "_Deferred_sequence",
    src = "deferred_sequence.ml",
    intf = ":_Deferred_sequence.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_std",
        ":_Throttle",
    ],
)

################
ocaml_interface(
    name = "_Deferred_sequence.cmi",
    src = "deferred_sequence.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
    ],
)

#############
ocaml_module(
    name = "_Deferred_std",
    src = "deferred_std.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
    ],
)

#############
ocaml_module(
    name = "_Execution_context",
    src = "execution_context.ml",
    intf = ":_Execution_context.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Monitor0",
        ":_Priority",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_Execution_context.cmi",
    src = "execution_context.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Monitor0",
        ":_Priority",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_External_job",
    src = "external_job.ml",
    intf = ":_External_job.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_External_job.cmi",
    src = "external_job.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Import",
    src = "import.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_kernel_config",
        ":_Debug",
        ":_Time_ns",
    ],
)

#############
ocaml_module(
    name = "_Ivar",
    src = "ivar.ml",
    intf = ":_Ivar.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred0",
        ":_Ivar0",
    ],
)

################
ocaml_interface(
    name = "_Ivar.cmi",
    src = "ivar.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred0",
        ":_Import",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Ivar0",
    src = "ivar0.ml",
    intf = ":_Ivar0.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
        ":_Scheduler1",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_Ivar0.cmi",
    src = "ivar0.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Ivar_filler",
    src = "ivar_filler.ml",
    intf = ":_Ivar_filler.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Ivar",
    ],
)

################
ocaml_interface(
    name = "_Ivar_filler.cmi",
    src = "ivar_filler.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred0",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Job",
    src = "job.ml",
    intf = ":_Job.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Job_pool",
    ],
)

################
ocaml_interface(
    name = "_Job.cmi",
    src = "job.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Job_or_event",
    src = "job_or_event.ml",
    intf = ":_Job_or_event.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
        ":_Time_ns",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_Job_or_event.cmi",
    src = "job_or_event.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Job_or_event_intf",
    ],
)

#############
ocaml_module(
    name = "_Job_or_event_intf",
    src = "job_or_event_intf.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Job",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Job_pool",
    src = "job_pool.ml",
    intf = ":_Job_pool.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
    ],
)

################
ocaml_interface(
    name = "_Job_pool.cmi",
    src = "job_pool.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Job_queue",
    src = "job_queue.ml",
    intf = ":_Job_queue.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_External_job",
        ":_Import",
        ":_Scheduler0",
        ":_Time_ns",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_Job_queue.cmi",
    src = "job_queue.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
        ":_Scheduler0",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Lazy_deferred",
    src = "lazy_deferred.ml",
    intf = ":_Lazy_deferred.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
        ":_Deferred_std",
        ":_Ivar",
    ],
)

################
ocaml_interface(
    name = "_Lazy_deferred.cmi",
    src = "lazy_deferred.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
    ],
)

#############
ocaml_module(
    name = "_Monad_sequence",
    src = "monad_sequence.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Monitor",
    src = "monitor.ml",
    intf = ":_Monitor.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_kernel_config",
        ":_Debug",
        ":_Deferred1",
        ":_Deferred_std",
        ":_Execution_context",
        ":_Import",
        ":_Ivar",
        ":_Ivar_filler",
        ":_Monitor0",
        ":_Priority",
        ":_Scheduler1",
        ":_Tail",
    ],
)

################
ocaml_interface(
    name = "_Monitor.cmi",
    src = "monitor.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Execution_context",
        ":_Monitor0",
        ":_Priority",
        ":_Tail",
    ],
)

#############
ocaml_module(
    name = "_Monitor0",
    src = "monitor0.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Debug",
        ":_Import",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Mvar",
    src = "mvar.ml",
    intf = ":_Mvar.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Bvar",
        ":_Deferred_std",
        ":_Import",
        ":_Ivar",
        ":_Pipe",
    ],
)

################
ocaml_interface(
    name = "_Mvar.cmi",
    src = "mvar.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred",
        ":_Import",
        ":_Pipe",
    ],
)

#############
ocaml_module(
    name = "_Pipe",
    src = "pipe.ml",
    intf = ":_Pipe.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_stream",
        ":_Deferred",
        ":_Deferred_std",
        ":_Import",
        ":_Ivar",
        ":_Monitor",
        ":_Tail",
    ],
)

################
ocaml_interface(
    name = "_Pipe.cmi",
    src = "pipe.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_stream",
        ":_Deferred",
    ],
)

#############
ocaml_module(
    name = "_Priority",
    src = "priority.ml",
    intf = ":_Priority.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

################
ocaml_interface(
    name = "_Priority.cmi",
    src = "priority.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
    ],
)

#############
ocaml_module(
    name = "_Require_explicit_time_source",
    src = "require_explicit_time_source.ml",
    intf = ":_Require_explicit_time_source.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Clock_ns",
        ":_Import",
        ":_Scheduler",
        ":_Time_ns",
    ],
)

################
ocaml_interface(
    name = "_Require_explicit_time_source.cmi",
    src = "require_explicit_time_source.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Clock_intf",
        ":_Deferred",
        ":_Import",
        ":_Scheduler",
        ":_Time_ns",
    ],
)

#############
ocaml_module(
    name = "_Scheduler",
    src = "scheduler.ml",
    intf = ":_Scheduler.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_stream",
        ":_Bvar",
        ":_Debug",
        ":_Deferred1",
        ":_Deferred_std",
        ":_Execution_context",
        ":_External_job",
        ":_Import",
        ":_Job_queue",
        ":_Monitor",
        ":_Scheduler1",
        ":_Synchronous_time_source0",
        ":_Tail",
        ":_Time_ns",
    ],
)

################
ocaml_interface(
    name = "_Scheduler.cmi",
    src = "scheduler.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_stream",
        ":_Deferred1",
        ":_Execution_context",
        ":_Import",
        ":_Job",
        ":_Monitor",
        ":_Priority",
        ":_Time_ns",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Scheduler0",
    src = "scheduler0.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Tracing",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Scheduler1",
    src = "scheduler1.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_kernel_config",
        ":_Debug",
        ":_Execution_context",
        ":_External_job",
        ":_Import",
        ":_Job_pool",
        ":_Job_queue",
        ":_Priority",
        ":_Scheduler0",
        ":_Synchronous_time_source0",
        ":_Time_ns",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Stack_or_counter",
    src = "stack_or_counter.ml",
    intf = ":_Stack_or_counter.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS,
)

################
ocaml_interface(
    name = "_Stack_or_counter.cmi",
    src = "stack_or_counter.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS,
)

#############
ocaml_module(
    name = "_Synchronous_time_source",
    src = "synchronous_time_source.ml",
    intf = ":_Synchronous_time_source.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Scheduler1",
        ":_Synchronous_time_source0",
    ],
)

################
ocaml_interface(
    name = "_Synchronous_time_source.cmi",
    src = "synchronous_time_source.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Job",
        ":_Time_ns",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Synchronous_time_source0",
    src = "synchronous_time_source0.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
        ":_Import",
        ":_Job",
        ":_Job_or_event",
        ":_Job_or_event_intf",  # obazl:retain
        ":_Monitor0",
        ":_Scheduler0",
        ":_Time_ns",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Tail",
    src = "tail.ml",
    intf = ":_Tail.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Import",
        ":_Ivar",
        ":_Types",
    ],
)

################
ocaml_interface(
    name = "_Tail.cmi",
    src = "tail.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Import",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Throttle",
    src = "throttle.ml",
    intf = ":_Throttle.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Deferred_std",
        ":_Import",
        ":_Ivar",
        ":_Monitor",
        ":_Stack_or_counter",
    ],
)

################
ocaml_interface(
    name = "_Throttle.cmi",
    src = "throttle.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Deferred1",
        ":_Monad_sequence",
    ],
)

#############
ocaml_module(
    name = "_Time_ns",
    src = "time_ns.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS,
)

#############
ocaml_module(
    name = "_Time_source",
    src = "time_source.ml",
    intf = ":_Time_source.cmi",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Bvar",
        ":_Debug",
        ":_Deferred1",
        ":_Deferred_std",
        ":_Import",
        ":_Ivar",
        ":_Job_or_event",
        ":_Monitor",
        ":_Scheduler1",
        ":_Synchronous_time_source",
        ":_Synchronous_time_source0",
        ":_Tail",
        ":_Time_ns",
        # ":_Time_source_intf",
    ],
)

################
ocaml_interface(
    name = "_Time_source.cmi",
    src = "time_source.mli",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_INTERFACE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Time_source_intf",
    ],
)

#############
ocaml_module(
    name = "_Time_source_intf",
    src = "time_source_intf.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Async_stream",
        ":_Deferred1",
        ":_Import",
        ":_Ivar",
        ":_Job",
        ":_Synchronous_time_source",
        ":_Time_ns",
    ],
)

#############
ocaml_module(
    name = "_Tracing",
    src = "tracing.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Execution_context",
    ],
)

#############
ocaml_module(
    name = "_Types",
    src = "types.ml",
    ns = ":Async_kernel_ns",
    opts = ASYNC_KERNEL_MODULE_OPTS,
    ppx = ASYNC_KERNEL_PPX,
    ppx_args = ASYNC_KERNEL_PPX_ARGS,
    deps = ASYNC_KERNEL_DEPS + [
        # do not sort (buildifier)
        ":_Import",
        ":_Priority",
        ":_Time_ns",
    ],
)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)
