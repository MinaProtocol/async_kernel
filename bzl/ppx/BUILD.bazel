load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")
load("@obazl_rules_ocaml//ocaml:rules.bzl", "ppx_executable", "ppx_module")
load("//:BUILD.bzl", "REPO_PPX_EXECUTABLE_OPTS")
load(":BUILD.bzl", "PKG_PPX_EXECUTABLE_OPTS")

THIS_PPX_EXECUTABLE_OPTS = REPO_PPX_EXECUTABLE_OPTS + PKG_PPX_EXECUTABLE_OPTS

###############
ppx_executable(
    name = "ppx.exe[ppx_jane]",
    lazy_deps = [
        # "@opam//pkg:ppx_expect.collector",
        # "@opam//pkg:ppx_hash.runtime-lib",
        # "@opam//pkg:ppx_sexp_conv.runtime-lib",
        # "@opam//pkg:ppx_assert.runtime-lib",
        # "@opam//pkg:ppx_compare.runtime-lib",
        # "@opam//pkg:ppx_inline_test.runtime-lib",
        # "@opam//pkg:ppx_bench.runtime-lib",
        # "@opam//pkg:ppx_enumerate.runtime-lib",
        # "@opam//pkg:ppx_module_timer.runtime",
    ],
    main = ":Driver",
    opts = THIS_PPX_EXECUTABLE_OPTS,
    visibility = [
        "//eager_deferred/src:__pkg__",
        "//limiter_async/src:__pkg__",
        "//limiter_async/test:__pkg__",
        "//persistent_connection_kernel/src:__pkg__",
        "//src:__pkg__",
        "//weak_hashtbl_async/src:__pkg__",
        "//weak_hashtbl_async/test:__pkg__",
    ],
    deps = [
        "@opam//pkg:ppx_jane",
        "@opam//pkg:ppxlib",
    ],
)

################################################################
################################################################
ppx_module(
    name = "Driver",
    src = ":ppxlib_driver.ml",
    opts = ["-linkall"],
    visibility = ["//visibility:public"],
    deps = ["@opam//pkg:ppxlib"],
)

########
genrule(
    name = "gendriver",
    outs = ["ppxlib_driver.ml"],
    cmd = "\n".join([
        "echo \"(* GENERATED FILE - DO NOT EDIT *)\" > \"$@\"",
        "echo \"let () = Ppxlib.Driver.standalone ()\" >> \"$@\"",
    ]),
)

###################################################################
######## Configuration Settings - see :BUILD.bzl #################
bool_flag(
    name = "always-link",
    build_setting_default = False,
)

config_setting(
    name = "enable_always_link",
    flag_values = {":always-link": str(True)},
)

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "threads",
    build_setting_default = True,
)

config_setting(
    name = "enable_threads",
    flag_values = {":threads": str(True)},
)

bool_flag(
    name = "tooling",
    build_setting_default = False,
)

config_setting(
    name = "enable_tooling",
    flag_values = {":tooling": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

## PPX control
string_flag(
    name = "ppx-out",
    build_setting_default = "binary",
    values = [
        "binary",
        "text",
    ],
)

config_setting(
    name = "enable_ppx_output_format_text",
    flag_values = {":ppx-out": "text"},
)

config_setting(
    name = "enable_ppx_output_format_binary",
    flag_values = {":ppx-out": "binary"},
)
