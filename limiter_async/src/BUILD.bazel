## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:build.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns_module",
    "ppx_executable",
)

COMMON_OPTS = select({
    "//bzl/config:enable_verbose": ["-verbose"],
    "//conditions:default": ["-thread"],
}) + []

LINK_OPTS = select({
    "//bzl/config:always_link": ["-linkall"],
    "//conditions:default": [],
}) + []

EXEC_OPTS = COMMON_OPTS + LINK_OPTS + []

IMPL_OPTS = COMMON_OPTS + LINK_OPTS + []

INTF_OPTS = COMMON_OPTS + LINK_OPTS + []

ARCHIVE_OPTS = COMMON_OPTS + LINK_OPTS + []

COMMON_DEPS = []

PPX_EXEC_OPTS = COMMON_OPTS + LINK_OPTS + []

PPX_IMPL_OPTS = COMMON_OPTS + LINK_OPTS + []

PPX_INTF_OPTS = COMMON_OPTS + LINK_OPTS + []

PPX_NS_OPTS = COMMON_OPTS + LINK_OPTS + []

PPX_ARCHIVE_OPTS = COMMON_OPTS + LINK_OPTS + []

LIMITER_ASYNC_NS = "Limiter_async"

## (ppx_jane)
PPX_0 = "//bzl/ppx:ppx[ppx_jane]"

PPX_0_ARGS = [
    # do not sort (buildifier)
    "-cookie",
    "library-name=\"async_kernel\"",
    "-corrected-suffix",
    ".ppx-corrected",
]

ocaml_archive(
    name = "limiter_async",
    opts = ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":limiter_async_ns_module",
        ":limiter_async.cm_",
    ],
)

ocaml_ns_module(
    name = "limiter_async_ns_module",
    ns = LIMITER_ASYNC_NS,
    submodules = [
        # do not sort (buildifier)
        "limiter_async.ml",
    ],
)

COMMON_DEPS_LIMITER_ASYNC = [
    # do not sort (buildifier)
    "@async_kernel//src:async_kernel",
    "@opam//pkg:core_kernel",
    "@opam//pkg:core_kernel.limiter",
]

ocaml_interface(
    name = "limiter_async.cmi",
    intf = "limiter_async.mli",
    ns_module = ":limiter_async_ns_module",
    opts = INTF_OPTS,
    ppx = PPX_0,
    ppx_args = PPX_0_ARGS,
    visibility = ["//visibility:private"],
    deps = COMMON_DEPS_LIMITER_ASYNC,
)

ocaml_module(
    name = "limiter_async.cm_",
    impl = "limiter_async.ml",
    intf = ":limiter_async.cmi",
    ns_module = ":limiter_async_ns_module",
    opts = IMPL_OPTS,
    ppx = PPX_0,
    ppx_args = PPX_0_ARGS,
    visibility = ["//visibility:public"],
    deps = COMMON_DEPS_LIMITER_ASYNC,
)
